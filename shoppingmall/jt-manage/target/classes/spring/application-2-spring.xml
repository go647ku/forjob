<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">


	<!-- 开启包扫描 -->
	<context:component-scan base-package="com.jt"/>
	
	<!-- 管理数据源,导入properties -->
	<context:property-placeholder location="classpath:/properties/*.properties" />
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
</bean>
	
	
	<!-- 添加事务控制 注解形式/xml形式 -->
	
	<!--开启注解标签 -->
	<tx:annotation-driven />
	
	<!-- 
		配置文件形式
		1、定义事务管理器，负责事务开关，配置数据源
		2、AOP 面向切面编程 通知+切入点=切面
		  （环绕通知：只有环绕通知能够控制目标方法执行）、前置通知、后置通知、异常通知、最终通知
		   剩余的通知一般用于记录程序的执行情况，记录日志log
	    3、切入点表达式写法：
	      within(包名.类名) 粒度：粗的   按类匹配
	      execution(返回值类型 包名。类名。方法名（参数）) 粒度：细的 按照方法参数匹配
	 -->
	
	
	
	
	<!-- 定义事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource"  ref="dataSource"></property>
	</bean>
	
	<!-- 定义通知 propagetion="REQUIRED" 必须添加事务
	               propagetion="SUPPORTS" 表示事务支持，如果线程操作前有事务，则合并一个事务，如果操作前没有事务，则以非事务方式来运行
	               read-only="true" :表示只读                         
	
	-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save* " propagation="REQUIRED"/>
			<tx:method name="update* " propagation="REQUIRED"/>
			<tx:method name="del* " propagation="REQUIRED"/>
			<tx:method name="find* " propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 形成切面 -->
	 <aop:config>
		<aop:pointcut expression="execution(* com.jt.*.service.*.*(..))" id="pc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	</aop:config>
	
	  <!-- 添加AOP配置(启用AOP功能) -->
    <aop:aspectj-autoproxy/>
    
	  
</beans>